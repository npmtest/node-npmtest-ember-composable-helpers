{"/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/test.js":"/* istanbul instrument in package npmtest_ember_composable_helpers */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/lib.npmtest_ember_composable_helpers.js":"/* istanbul instrument in package npmtest_ember_composable_helpers */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_ember_composable_helpers = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_ember_composable_helpers = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-ember-composable-helpers && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_ember_composable_helpers */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_ember_composable_helpers\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_ember_composable_helpers.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_ember_composable_helpers.rollup.js'] =\n            local.assetsDict['/assets.npmtest_ember_composable_helpers.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_ember_composable_helpers.__dirname + '/lib.npmtest_ember_composable_helpers.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/node_modules/ember-composable-helpers/index.js":"/* jshint node: true, esnext: false */\n/* jscs: disable */\n'use strict';\n\nvar Funnel = require('broccoli-funnel');\nvar path = require('path');\nvar intersection = require('./lib/intersection');\nvar difference = require('./lib/difference');\n\nmodule.exports = {\n  name: 'ember-composable-helpers',\n\n  included: function(app) {\n    this._super.included.apply(this, arguments);\n\n    // see: https://github.com/ember-cli/ember-cli/issues/3718\n    if (typeof app.import !== 'function' && app.app) {\n      app = app.app;\n    }\n\n    this.app = app;\n    this.app.options = this.app.options || {};\n\n    var config = this.app.options[this.name] || {};\n    this.whitelist = this.generateWhitelist(config);\n    this.blacklist = this.generateBlacklist(config);\n  },\n\n  treeForAddon: function() {\n    // see: https://github.com/ember-cli/ember-cli/issues/4463\n    var tree = this._super.treeForAddon.apply(this, arguments);\n    return this.filterHelpers(tree, new RegExp('^modules\\/' + this.name + '\\/helpers\\/', 'i'));\n  },\n\n  filterHelpers: function(tree, regex) {\n    var whitelist = this.whitelist;\n    var blacklist = this.blacklist;\n    var _this = this;\n\n    // exit early if no opts defined\n    if ((!whitelist || whitelist.length === 0) && (!blacklist || blacklist.length === 0)) {\n      return new Funnel(tree);\n    }\n\n    return new Funnel(tree, {\n      exclude: [function(name) {\n        return _this.exclusionFilter(name, regex, {\n          whitelist: whitelist,\n          blacklist: blacklist\n        });\n      }]\n    });\n  },\n\n  exclusionFilter: function(name, regex, lists) {\n    var whitelist = lists.whitelist || [];\n    var blacklist = lists.blacklist || [];\n    var isAddonHelper = regex.test(name);\n    var helperName = path.basename(name, '.js');\n    var isWhitelisted = whitelist.indexOf(helperName) !== -1;\n    var isBlacklisted = blacklist.indexOf(helperName) !== -1;\n\n    // non-helper, don't exclude\n    if (!isAddonHelper) {\n      return false;\n    }\n\n    // don't exclude if both lists are empty\n    if (whitelist.length === 0 && blacklist.length === 0) {\n      return false;\n    }\n\n    // don't exclude if both whitelisted and blacklisted\n    if (isWhitelisted && isBlacklisted) {\n      return false;\n    }\n\n    // only whitelist defined\n    if (whitelist.length && blacklist.length === 0) {\n      return !isWhitelisted;\n    }\n\n    // only blacklist defined\n    if (blacklist.length && whitelist.length === 0) {\n      return isBlacklisted;\n    }\n\n    return !isWhitelisted || isBlacklisted;\n  },\n\n  generateWhitelist: function(addonConfig) {\n    var only = addonConfig.only || [];\n    var except = addonConfig.except || [];\n\n    if (except && except.length) {\n      return difference(only, except);\n    }\n\n    return only;\n  },\n\n  generateBlacklist: function(addonConfig) {\n    var only = addonConfig.only || [];\n    var except = addonConfig.except || [];\n\n    if (only && only.length) {\n      return intersection(except, only);\n    }\n\n    return except;\n  }\n};\n/* jscs: enable */\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/node_modules/ember-composable-helpers/addon/index.js":"export { default as AppendHelper } from './helpers/append';\nexport { default as ArrayHelper } from './helpers/array';\nexport { default as CamelizeHelper } from './helpers/camelize';\nexport { default as CapitalizeHelper } from './helpers/capitalize';\nexport { default as ChunkHelper } from './helpers/chunk';\nexport { default as ClassifyHelper } from './helpers/classify';\nexport { default as CompactHelper } from './helpers/compact';\nexport { default as ComputeHelper } from './helpers/compute';\nexport { default as ContainsHelper } from './helpers/contains';\nexport { default as DasherizeHelper } from './helpers/dasherize';\nexport { default as DecHelper } from './helpers/dec';\nexport { default as DropHelper } from './helpers/drop';\nexport { default as FilterByHelper } from './helpers/filter-by';\nexport { default as FilterHelper } from './helpers/filter';\nexport { default as FindByHelper } from './helpers/find-by';\nexport { default as GroupByHelper } from './helpers/group-by';\nexport { default as IncHelper } from './helpers/inc';\nexport { default as IntersectHelper } from './helpers/intersect';\nexport { default as InvokeHelper } from './helpers/invoke';\nexport { default as JoinHelper } from './helpers/join';\nexport { default as MapByHelper } from './helpers/map-by';\nexport { default as MapHelper } from './helpers/map';\nexport { default as OptionalHelper } from './helpers/optional';\nexport { default as PipeHelper } from './helpers/pipe';\nexport { default as PipeActionHelper } from './helpers/pipe-action';\nexport { default as RangeHelper } from './helpers/range';\nexport { default as ReduceHelper } from './helpers/reduce';\nexport { default as RejectByHelper } from './helpers/reject-by';\nexport { default as RepeatHelper } from './helpers/repeat';\nexport { default as ShuffleHelper } from './helpers/shuffle';\nexport { default as SortByHelper } from './helpers/sort-by';\nexport { default as TakeHelper } from './helpers/take';\nexport { default as ToggleHelper } from './helpers/toggle';\nexport { default as ToggleActionHelper } from './helpers/toggle-action';\nexport { default as TruncateHelper } from './helpers/truncate';\nexport { default as UnderscoreHelper } from './helpers/underscore';\nexport { default as UnionHelper } from './helpers/union';\nexport { default as WHelper } from './helpers/w';\nexport { default as WithoutHelper } from './helpers/without';\nexport { default as FlattenHelper } from './helpers/flatten';\nexport { default as ObjectAtHelper } from './helpers/object-at';\nexport { default as SliceHelper } from './helpers/slice';\nexport { default as TitleizeHelper } from './helpers/titleize';\nexport { default as NextHelper } from './helpers/next';\nexport { default as PreviousHelper } from './helpers/previous';\nexport { default as HasNextHelper } from './helpers/has-next';\nexport { default as HasPreviousHelper } from './helpers/has-previous';\nexport { default as QueueHelper } from './helpers/queue';\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/node_modules/ember-composable-helpers/config/environment.js":"/*jshint node:true*/\n'use strict';\n\nmodule.exports = function(/* environment, appConfig */) {\n  return { };\n};\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/node_modules/ember-composable-helpers/lib/difference.js":"/* jshint node: true, esnext: false */\n/* jscs: disable */\n/**\n * Finds the difference between 2 arrays.\n *\n * let a = [1, 2, 3];\n * let b = [3, 4, 5];\n * difference(a, b) === [1, 2];\n * difference(b, a) === [4, 5];\n *\n * @public\n * @param  {Array} a\n * @param  {Array} b\n * @return {Array} diff\n */\nmodule.exports = function difference(a, b) {\n  var seen = [];\n  var diff = [];\n\n  for (var i = 0; i < b.length; i++) {\n    seen[b[i]] = true;\n  }\n\n  for (var j = 0; j < a.length; j++) {\n    if (!seen[a[j]]) {\n      diff.push(a[j]);\n    }\n  }\n\n  return diff;\n};\n/* jscs: enable */\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/node_modules/ember-composable-helpers/lib/intersection.js":"/* jshint node: true, esnext: false */\n/* jscs: disable */\n/**\n * Finds the intersection between 2 arrays.\n *\n * let a = [1, 2, 3];\n * let b = [3, 4, 5];\n * intersection(a, b) === [3];\n * intersection(b, a) === [3];\n *\n * @public\n * @param  {Array} a\n * @param  {Array} b\n * @return {Array}\n */\nmodule.exports = function intersection(a, b) {\n  var arrays = [a, b];\n\n  return arrays.pop().filter(function(candidate) {\n    for (var i = 0; i < arrays.length; i++) {\n      var found = false;\n      var array = arrays[i];\n      for (var j = 0; j < array.length; j++) {\n        if (array[j] === candidate) {\n          found = true;\n          break;\n        }\n      }\n\n      if (found === false) {\n        return false;\n      }\n    }\n\n    return true;\n  });\n};\n/* jscs: enable */\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/node_modules/ember-composable-helpers/addon/helpers/append.js":"import computed from 'ember-computed';\nimport get from 'ember-metal/get';\nimport { isEmberArray } from 'ember-array/utils';\nimport createMultiArrayHelper from '../-private/create-multi-array-helper';\n\nexport function append(...dependentKeys) {\n  dependentKeys = dependentKeys || [];\n  let arrayKeys = dependentKeys.map((dependentKey) => {\n    return `${dependentKey}.[]`;\n  });\n\n  return computed(...arrayKeys, function() {\n    let array = dependentKeys.map((dependentKey) => {\n      let value = get(this, dependentKey);\n      return isEmberArray(value) ? value.toArray() : [value];\n    });\n\n    return [].concat(...array);\n  });\n}\n\nexport default createMultiArrayHelper(append);\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/node_modules/ember-composable-helpers/addon/helpers/array.js":"import { helper } from 'ember-helper';\nimport { A as emberArray } from 'ember-array/utils';\n\nexport function array(params = []) {\n  // slice params to avoid mutating the provided params\n  return emberArray(params.slice());\n}\n\nexport default helper(array);\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/node_modules/ember-composable-helpers/addon/helpers/chunk.js":"import { isEmberArray } from 'ember-array/utils';\nimport computed from 'ember-computed';\nimport Helper from 'ember-helper';\nimport get from 'ember-metal/get';\nimport observer from 'ember-metal/observer';\nimport set from 'ember-metal/set';\n\nconst { max, ceil } = Math;\n\nexport function chunk(num, array) {\n  let integer = parseInt(num, 10);\n  let size = max(integer, 0);\n\n  let length = 0;\n  if (isEmberArray(array)) {\n    length = get(array, 'length');\n  }\n\n  if (!length || size < 1) {\n    return [];\n  } else {\n    let index = 0;\n    let resultIndex = -1;\n    let result = new Array(ceil(length / size));\n\n    while (index < length) {\n      result[++resultIndex] = array.slice(index, (index += size));\n    }\n\n    return result;\n  }\n}\n\nexport default Helper.extend({\n  content: computed('num', 'array.[]', function() {\n    let array = get(this, 'array');\n    let num = get(this, 'num');\n\n    return chunk(num, array);\n  }),\n\n  compute([num, array]) {\n    set(this, 'array', array);\n    set(this, 'num', num);\n\n    return get(this, 'content');\n  },\n\n  contentDidChange: observer('content', function() {\n    this.recompute();\n  })\n});\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/node_modules/ember-composable-helpers/addon/helpers/compact.js":"import {\n  A as emberArray,\n  isEmberArray\n} from 'ember-array/utils';\nimport { filter } from 'ember-computed';\nimport Helper from 'ember-helper';\nimport get from 'ember-metal/get';\nimport observer from 'ember-metal/observer';\nimport set from 'ember-metal/set';\nimport { isPresent } from 'ember-utils';\n\nexport default Helper.extend({\n  compute([array]) {\n    if (!isEmberArray(array)) {\n      return emberArray([array]);\n    }\n\n    set(this, 'array', array);\n\n    return get(this, 'content');\n  },\n\n  content: filter('array', isPresent),\n\n  contentDidChange: observer('content', function() {\n    this.recompute();\n  })\n});\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/node_modules/ember-composable-helpers/addon/helpers/compute.js":"import { helper } from 'ember-helper';\n\nexport function compute([action, ...params]) {\n  return action(...params);\n}\n\nexport default helper(compute);\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/node_modules/ember-composable-helpers/addon/helpers/contains.js":"import { A as emberArray } from 'ember-array/utils';\nimport get from 'ember-metal/get';\nimport { isEmberArray } from 'ember-array/utils';\nimport createNeedleHaystackHelper from '../-private/create-needle-haystack-helper';\nimport includes from '../utils/includes';\n\nfunction _contains(needle, haystack) {\n  return includes(emberArray(haystack), needle);\n}\n\nexport function contains(needle, haystack) {\n  if (!isEmberArray(haystack)) {\n    return false;\n  }\n\n  if (isEmberArray(needle) && get(needle, 'length')) {\n    return needle.reduce((acc, val) => acc && _contains(val, haystack), true);\n  }\n\n  return _contains(needle, haystack);\n}\n\nexport default createNeedleHaystackHelper(contains);\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/node_modules/ember-composable-helpers/addon/helpers/dec.js":"import { helper } from 'ember-helper';\nimport { isEmpty } from 'ember-utils';\n\nexport function dec([step, val]) {\n  if (isEmpty(val)) {\n    val = step;\n    step = undefined;\n  }\n\n  val = Number(val);\n\n  if (isNaN(val)) {\n    return;\n  }\n\n  if (step === undefined) {\n    step = 1;\n  }\n\n  return val - step;\n}\n\nexport default helper(dec);\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/node_modules/ember-composable-helpers/addon/helpers/drop.js":"import Helper from 'ember-helper';\nimport observer from 'ember-metal/observer';\nimport set from 'ember-metal/set';\n\nexport default Helper.extend({\n  compute([dropAmount, array]) {\n    set(this, 'array', array);\n    return array.slice(dropAmount);\n  },\n\n  arrayContentDidChange: observer('array.[]', function() {\n    this.recompute();\n  })\n});\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/node_modules/ember-composable-helpers/addon/helpers/filter-by.js":"import Ember from 'ember';\nimport { isEmberArray } from 'ember-array/utils';\nimport { filter } from 'ember-computed';\nimport Helper from 'ember-helper';\nimport get from 'ember-metal/get';\nimport observer from 'ember-metal/observer';\nimport set from 'ember-metal/set';\nimport { isEmpty, isPresent } from 'ember-utils';\nimport isEqual from '../utils/is-equal';\n\nconst { defineProperty } = Ember;\n\nexport default Helper.extend({\n  compute([byPath, value, array]) {\n    if (!isEmberArray(array) && isEmberArray(value)) {\n      array = value;\n      value = undefined;\n    }\n\n    set(this, 'array', array);\n    set(this, 'byPath', byPath);\n    set(this, 'value', value);\n\n    return get(this, 'content');\n  },\n\n  byPathDidChange: observer('byPath', 'value', function() {\n    let byPath = get(this, 'byPath');\n    let value = get(this, 'value');\n\n    if (isEmpty(byPath)) {\n      defineProperty(this, 'content', []);\n      return;\n    }\n\n    let filterFn;\n\n    if (isPresent(value)) {\n      if (typeof value === 'function') {\n        filterFn = (item) => value(get(item, byPath));\n      } else {\n        filterFn = (item) => isEqual(get(item, byPath), value);\n      }\n    } else {\n      filterFn = (item) => !!get(item, byPath);\n    }\n\n    let cp = filter(`array.@each.${byPath}`, filterFn);\n\n    defineProperty(this, 'content', cp);\n  }),\n\n  contentDidChange: observer('content', function() {\n    this.recompute();\n  })\n});\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/node_modules/ember-composable-helpers/addon/helpers/filter.js":"import Ember from 'ember';\nimport { filter } from 'ember-computed';\nimport Helper from 'ember-helper';\nimport get from 'ember-metal/get';\nimport observer from 'ember-metal/observer';\nimport set from 'ember-metal/set';\nimport { isEmpty } from 'ember-utils';\n\nconst { defineProperty } = Ember;\n\nexport default Helper.extend({\n  compute([callback, array]) {\n    set(this, 'array', array);\n    set(this, 'callback', callback);\n\n    return get(this, 'content');\n  },\n\n  callbackDidChange: observer('callback', function() {\n    let callback = get(this, 'callback');\n\n    if (isEmpty(callback)) {\n      defineProperty(this, 'content', []);\n      return;\n    }\n\n    let cp = filter('array', callback);\n\n    defineProperty(this, 'content', cp);\n  }),\n\n  contentDidChange: observer('content', function() {\n    this.recompute();\n  })\n});\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/node_modules/ember-composable-helpers/addon/helpers/find-by.js":"import Ember from 'ember';\nimport computed from 'ember-computed';\nimport Helper from 'ember-helper';\nimport get from 'ember-metal/get';\nimport observer from 'ember-metal/observer';\nimport set from 'ember-metal/set';\nimport { A as emberArray } from 'ember-array/utils';\nimport { isEmpty } from 'ember-utils';\n\nconst { defineProperty } = Ember;\n\nexport default Helper.extend({\n  compute([byPath, value, array]) {\n    set(this, 'array', array);\n    set(this, 'byPath', byPath);\n    set(this, 'value', value);\n\n    return get(this, 'content');\n  },\n\n  byPathDidChange: observer('byPath', function() {\n    let byPath = get(this, 'byPath');\n\n    if (isEmpty(byPath)) {\n      defineProperty(this, 'content', []);\n      return;\n    }\n\n    defineProperty(this, 'content', computed(`array.@each.${byPath}`, 'value', function() {\n      let array = get(this, 'array');\n      let value = get(this, 'value');\n\n      return emberArray(array).findBy(byPath, value);\n    }));\n  }),\n\n  contentDidChange: observer('content', function() {\n    this.recompute();\n  })\n});\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/node_modules/ember-composable-helpers/addon/helpers/flatten.js":"import Helper from 'ember-helper';\nimport { isEmberArray } from 'ember-array/utils';\nimport observer from 'ember-metal/observer';\nimport set from 'ember-metal/set';\n\nexport function flatten(array) {\n  if (!isEmberArray(array)) {\n    return array;\n  }\n\n  return array.reduce((flattened, el) => {\n    return flattened.concat(flatten(el));\n  }, []);\n}\n\nexport default Helper.extend({\n  compute([array]) {\n    set(this, 'array', array);\n\n    return flatten(array);\n  },\n\n  arrayContentDidChange: observer('array.[]', function() {\n    this.recompute();\n  })\n});\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/node_modules/ember-composable-helpers/addon/helpers/group-by.js":"import Ember from 'ember';\nimport {\n  A as emberArray,\n  isEmberArray\n} from 'ember-array/utils';\nimport computed from 'ember-computed';\nimport Helper from 'ember-helper';\nimport get from 'ember-metal/get';\nimport observer from 'ember-metal/observer';\nimport set from 'ember-metal/set';\n\nconst { defineProperty, Object: emberObject } = Ember;\n\nconst groupFunction = function() {\n  let array = get(this, 'array');\n  let byPath = get(this, 'byPath');\n  let groups = emberObject.create();\n\n  array.forEach((item) => {\n    let groupName = get(item, byPath);\n    let group = get(groups, groupName);\n\n    if (!isEmberArray(group)) {\n      group = emberArray();\n      groups[`${groupName}`] = group;\n    }\n\n    group.push(item);\n  });\n\n  return groups;\n};\n\nexport default Helper.extend({\n  compute([byPath, array]) {\n    set(this, 'array', array);\n    set(this, 'byPath', byPath);\n\n    return get(this, 'content');\n  },\n\n  byPathDidChange: observer('byPath', function() {\n    let byPath = get(this, 'byPath');\n\n    if (byPath) {\n      defineProperty(this, 'content', computed(`array.@each.${byPath}`, groupFunction));\n    } else {\n      defineProperty(this, 'content', null);\n    }\n  }),\n\n  contentDidChange: observer('content', function() {\n    this.recompute();\n  })\n});\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/node_modules/ember-composable-helpers/addon/helpers/has-next.js":"import Ember from 'ember';\nimport { next } from './next';\nimport createNeedleHaystackHelper from '../-private/create-needle-haystack-helper';\nimport isEqual from '../utils/is-equal';\n\nconst { isPresent } = Ember;\n\nexport function hasNext(currentValue, array, useDeepEqual = false) {\n  let nextValue = next(currentValue, array, useDeepEqual);\n  let isNotSameValue = !isEqual(nextValue, currentValue, useDeepEqual);\n\n  return isNotSameValue && isPresent(nextValue);\n}\n\nexport default createNeedleHaystackHelper(hasNext);\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/node_modules/ember-composable-helpers/addon/helpers/has-previous.js":"import Ember from 'ember';\nimport { previous } from './previous';\nimport createNeedleHaystackHelper from '../-private/create-needle-haystack-helper';\nimport isEqual from '../utils/is-equal';\n\nconst { isPresent } = Ember;\n\nexport function hasPrevious(currentValue, array, useDeepEqual = false) {\n  let previousValue = previous(currentValue, array, useDeepEqual);\n  let isNotSameValue = !isEqual(previousValue, currentValue, useDeepEqual);\n\n  return isNotSameValue && isPresent(previousValue);\n}\n\nexport default createNeedleHaystackHelper(hasPrevious);\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/node_modules/ember-composable-helpers/addon/helpers/inc.js":"import { helper } from 'ember-helper';\nimport { isEmpty } from 'ember-utils';\n\nexport function inc([step, val]) {\n  if (isEmpty(val)) {\n    val = step;\n    step = undefined;\n  }\n\n  val = Number(val);\n\n  if (isNaN(val)) {\n    return;\n  }\n\n  if (step === undefined) {\n    step = 1;\n  }\n\n  return val + step;\n}\n\nexport default helper(inc);\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/node_modules/ember-composable-helpers/addon/helpers/intersect.js":"import { intersect } from 'ember-computed';\nimport createMultiArrayHelper from '../-private/create-multi-array-helper';\n\nexport default createMultiArrayHelper(intersect);\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/node_modules/ember-composable-helpers/addon/helpers/invoke.js":"import { isEmberArray } from 'ember-array/utils';\nimport { helper } from 'ember-helper';\nimport { tryInvoke } from 'ember-utils';\nimport RSVP from 'rsvp';\n\nconst { all } = RSVP;\n\nexport function invoke([methodName, ...args]) {\n  let obj = args.pop();\n\n  if (isEmberArray(obj)) {\n    return function() {\n      let promises = obj.map((item) => tryInvoke(item, methodName, args));\n\n      return all(promises);\n    };\n  }\n\n  return function() {\n    return tryInvoke(obj, methodName, args);\n  };\n}\n\nexport default helper(invoke);\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/node_modules/ember-composable-helpers/addon/helpers/join.js":"import { isEmberArray } from 'ember-array/utils';\nimport Helper from 'ember-helper';\nimport observer from 'ember-metal/observer';\nimport set from 'ember-metal/set';\n\nexport default Helper.extend({\n  compute([separator, array]) {\n    if (isEmberArray(separator)) {\n      array = separator;\n      separator = ',';\n    }\n\n    set(this, 'array', array);\n    return array.join(separator);\n  },\n\n  arrayContentDidChange: observer('array.[]', function() {\n    this.recompute();\n  })\n});\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/node_modules/ember-composable-helpers/addon/helpers/map-by.js":"import Ember from 'ember';\nimport { mapBy } from 'ember-computed';\nimport Helper from 'ember-helper';\nimport get from 'ember-metal/get';\nimport observer from 'ember-metal/observer';\nimport set from 'ember-metal/set';\nimport { isEmpty } from 'ember-utils';\n\nconst { defineProperty } = Ember;\n\nexport default Helper.extend({\n  compute([byPath, array]) {\n    set(this, 'array', array);\n    set(this, 'byPath', byPath);\n\n    return get(this, 'content');\n  },\n\n  byPathDidChange: observer('byPath', function() {\n    let byPath = get(this, 'byPath');\n\n    if (isEmpty(byPath)) {\n      defineProperty(this, 'content', []);\n      return;\n    }\n\n    defineProperty(this, 'content', mapBy('array', byPath));\n  }),\n\n  contentDidChange: observer('content', function() {\n    this.recompute();\n  })\n});\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/node_modules/ember-composable-helpers/addon/helpers/map.js":"import Ember from 'ember';\nimport { map } from 'ember-computed';\nimport Helper from 'ember-helper';\nimport get from 'ember-metal/get';\nimport observer from 'ember-metal/observer';\nimport set from 'ember-metal/set';\nimport { isEmpty } from 'ember-utils';\n\nconst { defineProperty } = Ember;\n\nexport default Helper.extend({\n  compute([callback, array]) {\n    set(this, 'array', array);\n    set(this, 'callback', callback);\n\n    return get(this, 'content');\n  },\n\n  byPathDidChange: observer('callback', function() {\n    let callback = get(this, 'callback');\n\n    if (isEmpty(callback)) {\n      defineProperty(this, 'content', []);\n      return;\n    }\n\n    defineProperty(this, 'content', map('array', callback));\n  }),\n\n  contentDidChange: observer('content', function() {\n    this.recompute();\n  })\n});\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/node_modules/ember-composable-helpers/addon/helpers/next.js":"import Ember from 'ember';\nimport { A as emberArray } from 'ember-array/utils';\nimport getIndex from '../utils/get-index';\nimport createNeedleHaystackHelper from '../-private/create-needle-haystack-helper';\n\nconst { get, isEmpty } = Ember;\n\nexport function next(currentValue, array, useDeepEqual = false) {\n  let currentIndex = getIndex(array, currentValue, useDeepEqual);\n  let lastIndex = get(array, 'length') - 1;\n\n  if (isEmpty(currentIndex)) {\n    return;\n  }\n\n  return currentIndex === lastIndex ? currentValue : emberArray(array).objectAt(currentIndex + 1);\n}\n\nexport default createNeedleHaystackHelper(next);\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/node_modules/ember-composable-helpers/addon/helpers/object-at.js":"import Helper from 'ember-helper';\nimport { A as emberArray, isEmberArray } from 'ember-array/utils';\nimport computed from 'ember-computed';\nimport observer from 'ember-metal/observer';\nimport get from 'ember-metal/get';\nimport set from 'ember-metal/set';\n\nexport function objectAt(index, array) {\n  if (!isEmberArray(array)) {\n    return undefined;\n  }\n\n  index = parseInt(index, 10);\n\n  return emberArray(array).objectAt(index);\n}\n\nexport default Helper.extend({\n  content: computed('index', 'array.[]', function() {\n    let index = get(this, 'index');\n    let array = get(this, 'array');\n\n    return objectAt(index, array);\n  }),\n\n  compute([index, array]) {\n    set(this, 'index', index);\n    set(this, 'array', array);\n\n    return get(this, 'content');\n  },\n\n  contentDidChange: observer('content', function() {\n    this.recompute();\n  })\n});\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/node_modules/ember-composable-helpers/addon/helpers/optional.js":"import { helper } from 'ember-helper';\n\nexport function optional([action]) {\n  if (typeof action === 'function') {\n    return action;\n  }\n\n  return (i) => i;\n}\n\nexport default helper(optional);\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/node_modules/ember-composable-helpers/addon/helpers/pipe-action.js":"import { helper } from 'ember-helper';\nimport { pipe } from './pipe';\nimport ACTION from '../-private/closure-action';\n\nconst closurePipe = pipe;\nif (ACTION) {\n  closurePipe[ACTION] = true;\n}\n\nexport default helper(closurePipe);\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/node_modules/ember-composable-helpers/addon/helpers/pipe.js":"import { helper } from 'ember-helper';\nimport isPromise from '../utils/is-promise';\n\nexport function invokeFunction(acc, curr) {\n  if (isPromise(acc)) {\n    return acc.then(curr);\n  }\n\n  return curr(acc);\n}\n\nexport function pipe(actions = []) {\n  return function(...args) {\n    return actions.reduce((acc, curr, idx) => {\n      if (idx === 0) {\n        return curr(...args);\n      }\n\n      return invokeFunction(acc, curr);\n    }, undefined);\n  };\n}\n\nexport default helper(pipe);\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/node_modules/ember-composable-helpers/addon/helpers/previous.js":"import Ember from 'ember';\nimport { A as emberArray } from 'ember-array/utils';\nimport getIndex from '../utils/get-index';\nimport createNeedleHaystackHelper from '../-private/create-needle-haystack-helper';\n\nconst { isEmpty } = Ember;\n\nexport function previous(currentValue, array, useDeepEqual = false) {\n  let currentIndex = getIndex(array, currentValue, useDeepEqual);\n\n  if (isEmpty(currentIndex)) {\n    return;\n  }\n\n  return currentIndex === 0 ? currentValue : emberArray(array).objectAt(currentIndex - 1);\n}\n\nexport default createNeedleHaystackHelper(previous);\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/node_modules/ember-composable-helpers/addon/helpers/queue.js":"import { helper } from 'ember-helper';\nimport isPromise from '../utils/is-promise';\n\nexport function queue(actions = []) {\n  return function(...args) {\n    let invokeWithArgs = function(acc, curr) {\n      if (isPromise(acc)) {\n        return acc.then(() => curr(...args));\n      }\n\n      return curr(...args);\n    };\n\n    return actions.reduce((acc, curr, idx) => {\n      if (idx === 0) {\n        return curr(...args);\n      }\n\n      return invokeWithArgs(acc, curr);\n    }, undefined);\n  };\n}\n\nexport default helper(queue);\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/node_modules/ember-composable-helpers/addon/helpers/range.js":"import { helper } from 'ember-helper';\nimport { typeOf } from 'ember-utils';\nimport { gte, lte, gt, lt } from '../utils/comparison';\n\nexport function range([min, max, isInclusive]) {\n  isInclusive = typeOf(isInclusive) === 'boolean' ? isInclusive : false;\n  let numbers = [];\n\n  if (min < max) {\n    let testFn = isInclusive ? lte : lt;\n    for (let i = min; testFn(i, max); i++) {\n      numbers.push(i);\n    }\n  }\n\n  if (min > max) {\n    let testFn = isInclusive ? gte : gt;\n    for (let i = min; testFn(i, max); i--) {\n      numbers.push(i);\n    }\n  }\n\n  return numbers;\n}\n\nexport default helper(range);\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/node_modules/ember-composable-helpers/addon/helpers/reduce.js":"import Ember from 'ember';\nimport Helper from 'ember-helper';\nimport get from 'ember-metal/get';\nimport observer from 'ember-metal/observer';\nimport set from 'ember-metal/set';\nimport { isEmpty } from 'ember-utils';\nimport computed from 'ember-computed';\n\nconst { defineProperty } = Ember;\n\nexport default Helper.extend({\n  compute([callback, initialValue, array]) {\n    set(this, 'callback', callback);\n    set(this, 'array', array);\n    set(this, 'initialValue', initialValue);\n\n    return get(this, 'content');\n  },\n\n  callbackDidChange: observer('callback', 'initialValue', function() {\n    let callback = get(this, 'callback');\n    let initialValue = get(this, 'initialValue');\n\n    if (isEmpty(callback)) {\n      defineProperty(this, 'content', []);\n      return;\n    }\n\n    let cp = computed('array.[]', () => {\n      let array = get(this, 'array');\n      return array.reduce(callback, initialValue);\n    });\n\n    defineProperty(this, 'content', cp);\n  }),\n\n  contentDidChange: observer('content', function() {\n    this.recompute();\n  })\n});\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/node_modules/ember-composable-helpers/addon/helpers/reject-by.js":"import Ember from 'ember';\nimport { isEmberArray } from 'ember-array/utils';\nimport { filter } from 'ember-computed';\nimport Helper from 'ember-helper';\nimport get from 'ember-metal/get';\nimport observer from 'ember-metal/observer';\nimport set from 'ember-metal/set';\nimport { isEmpty, isPresent } from 'ember-utils';\nimport isEqual from '../utils/is-equal';\n\nconst { defineProperty } = Ember;\n\nexport default Helper.extend({\n  compute([byPath, value, array]) {\n\n    if (!isEmberArray(array) && isEmberArray(value)) {\n      array = value;\n      value = undefined;\n    }\n\n    set(this, 'array', array);\n    set(this, 'byPath', byPath);\n    set(this, 'value', value);\n\n    return get(this, 'content');\n  },\n\n  byPathDidChange: observer('byPath', 'value', function() {\n    let byPath = get(this, 'byPath');\n    let value = get(this, 'value');\n\n    if (isEmpty(byPath)) {\n      defineProperty(this, 'content', []);\n      return;\n    }\n\n    let filterFn;\n\n    if (isPresent(value)) {\n      if (typeof value === 'function') {\n        filterFn = (item) => !value(get(item, byPath));\n      } else {\n        filterFn = (item) => !isEqual(get(item, byPath), value);\n      }\n    } else {\n      filterFn = (item) => !get(item, byPath);\n    }\n\n    let cp = filter(`array.@each.${byPath}`, filterFn);\n\n    defineProperty(this, 'content', cp);\n  }),\n\n  contentDidChange: observer('content', function() {\n    this.recompute();\n  })\n});\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/node_modules/ember-composable-helpers/addon/helpers/repeat.js":"import { helper } from 'ember-helper';\nimport { typeOf } from 'ember-utils';\n\nexport function repeat([length, value]) {\n  if (typeOf(length) !== 'number') {\n    return [value];\n  }\n\n  return Array.apply(null, { length }).map(() => value);\n}\n\nexport default helper(repeat);\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/node_modules/ember-composable-helpers/addon/helpers/reverse.js":"import {\n  A as emberArray,\n  isEmberArray\n} from 'ember-array/utils';\nimport Helper from 'ember-helper';\nimport observer from 'ember-metal/observer';\nimport set from 'ember-metal/set';\n\nexport default Helper.extend({\n  compute([array]) {\n    if (!isEmberArray(array)) {\n      return [array];\n    }\n\n    set(this, 'array', array);\n    return emberArray(array).slice(0).reverse();\n  },\n\n  arrayContentDidChange: observer('array.[]', function() {\n    this.recompute();\n  })\n});\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/node_modules/ember-composable-helpers/addon/helpers/shuffle.js":"import {\n  A as emberArray,\n  isEmberArray\n} from 'ember-array/utils';\nimport Helper from 'ember-helper';\nimport observer from 'ember-metal/observer';\nimport get from 'ember-metal/get';\nimport set from 'ember-metal/set';\nimport { typeOf } from 'ember-utils';\n\nexport function shuffle(array, randomizer) {\n  array = array.slice(0);\n  let count = get(array, 'length');\n  let rand, temp;\n  randomizer = (typeOf(randomizer) === 'function' && randomizer) || Math.random;\n\n  while (count > 1) {\n    rand = Math.floor(randomizer() * (count--));\n\n    temp = array[count];\n    array[count] = array[rand];\n    array[rand] = temp;\n  }\n  return array;\n}\n\nexport default Helper.extend({\n  compute([random, array]) {\n    if (array === undefined) {\n      array = random;\n      random = undefined;\n    }\n\n    if (!isEmberArray(array)) {\n      return emberArray([array]);\n    }\n\n    set(this, 'array', array);\n    return shuffle(array, random);\n  },\n\n  arrayContentDidChange: observer('array.[]', function() {\n    this.recompute();\n  })\n});\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/node_modules/ember-composable-helpers/addon/helpers/slice.js":"import Helper from 'ember-helper';\nimport observer from 'ember-metal/observer';\nimport set from 'ember-metal/set';\n\nexport default Helper.extend({\n  compute([start, end, array]) {\n    set(this, 'array', array);\n    return array.slice(start, end);\n  },\n\n  arrayContentDidChange: observer('array.[]', function() {\n    this.recompute();\n  })\n});\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/node_modules/ember-composable-helpers/addon/helpers/sort-by.js":"import Ember from 'ember';\nimport { isEmberArray } from 'ember-array/utils';\nimport { sort } from 'ember-computed';\nimport Helper from 'ember-helper';\nimport get from 'ember-metal/get';\nimport observer from 'ember-metal/observer';\nimport set from 'ember-metal/set';\nimport { isEmpty, typeOf } from 'ember-utils';\n\nconst { defineProperty } = Ember;\n\nexport default Helper.extend({\n  compute(params) {\n    // slice params to avoid mutating the provided params\n    let sortProps = params.slice();\n    let array = sortProps.pop();\n    let [firstSortProp] = sortProps;\n\n    if (typeOf(firstSortProp) === 'function' || isEmberArray(firstSortProp)) {\n      sortProps = firstSortProp;\n    }\n\n    set(this, 'array', array);\n    set(this, 'sortProps', sortProps);\n\n    return get(this, 'content');\n  },\n\n  sortPropsDidChange: observer('sortProps', function() {\n    let sortProps = get(this, 'sortProps');\n\n    if (isEmpty(sortProps)) {\n      defineProperty(this, 'content', []);\n    }\n\n    if (typeof sortProps === 'function') {\n      defineProperty(this, 'content', sort('array', sortProps));\n    } else {\n      defineProperty(this, 'content', sort('array', 'sortProps'));\n    }\n  }),\n\n  contentDidChange: observer('content', function() {\n    this.recompute();\n  })\n});\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/node_modules/ember-composable-helpers/addon/helpers/take.js":"import Helper from 'ember-helper';\nimport observer from 'ember-metal/observer';\nimport set from 'ember-metal/set';\n\nexport default Helper.extend({\n  compute([takeAmount, array]) {\n    set(this, 'array', array);\n    return array.slice(0, takeAmount);\n  },\n\n  arrayContentDidChange: observer('array.[]', function() {\n    this.recompute();\n  })\n});\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/node_modules/ember-composable-helpers/addon/helpers/toggle-action.js":"import { helper } from 'ember-helper';\nimport { toggle } from './toggle';\nimport ACTION from '../-private/closure-action';\n\nconst closureToggle = toggle;\nif (ACTION) {\n  closureToggle[ACTION] = true;\n}\n\nexport default helper(closureToggle);\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/node_modules/ember-composable-helpers/addon/helpers/toggle.js":"import { helper } from 'ember-helper';\nimport get from 'ember-metal/get';\nimport set from 'ember-metal/set';\nimport { isPresent } from 'ember-utils';\n\nfunction nextIndex(length, currentIdx) {\n  if (currentIdx === -1 || currentIdx + 1 === length) {\n    return 0;\n  }\n\n  return currentIdx + 1;\n}\n\nexport function toggle([prop, obj, ...values]) {\n  return function() {\n    let currentValue = get(obj, prop);\n\n    if (isPresent(values)) {\n      let currentIdx = values.indexOf(currentValue);\n      let nextIdx = nextIndex(get(values, 'length'), currentIdx);\n\n      return set(obj, prop, values[nextIdx]);\n    }\n\n    return set(obj, prop, !currentValue);\n  };\n}\n\nexport default helper(toggle);\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/node_modules/ember-composable-helpers/addon/helpers/union.js":"import { union } from 'ember-computed';\nimport createMultiArrayHelper from '../-private/create-multi-array-helper';\n\nexport default createMultiArrayHelper(union);\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/node_modules/ember-composable-helpers/addon/helpers/without.js":"import {\n  A as emberArray,\n  isEmberArray\n} from 'ember-array/utils';\nimport get from 'ember-metal/get';\nimport { typeOf } from 'ember-utils';\nimport createNeedleHaystackHelper from '../-private/create-needle-haystack-helper';\nimport includes from '../utils/includes';\n\nfunction contains(needle, haystack) {\n  return includes(emberArray(haystack), needle);\n}\n\nexport function without(needle, haystack) {\n  if (!isEmberArray(haystack)) {\n    return false;\n  }\n\n  if (typeOf(needle) === 'array' && get(needle, 'length')) {\n    return haystack.reduce((acc, val) => contains(val, needle) ? acc : acc.concat(val), []);\n  }\n\n  return emberArray(haystack).without(needle);\n}\n\nexport default createNeedleHaystackHelper(without);\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/node_modules/ember-composable-helpers/addon/-private/closure-action.js":"import Ember from 'ember';\n\nconst { __loader } = Ember;\n\nlet ClosureActionModule = { ACTION: null };\n\nif ('ember-htmlbars/keywords/closure-action' in __loader.registry) {\n  ClosureActionModule = __loader.require('ember-htmlbars/keywords/closure-action');\n} else if ('ember-routing-htmlbars/keywords/closure-action' in __loader.registry) {\n  ClosureActionModule = __loader.require('ember-routing-htmlbars/keywords/closure-action');\n}\n\nexport default ClosureActionModule.ACTION;\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/node_modules/ember-composable-helpers/addon/-private/create-multi-array-helper.js":"import Ember from 'ember';\nimport {\n  A as emberArray,\n  isEmberArray\n} from 'ember-array/utils';\nimport Helper from 'ember-helper';\nimport { guidFor } from 'ember-metal/utils';\nimport observer from 'ember-metal/observer';\nimport get from 'ember-metal/get';\nimport set from 'ember-metal/set';\nimport { isEmpty } from 'ember-utils';\n\nconst { defineProperty } = Ember;\nconst idForArray = (array) => `__array-${guidFor(array)}`;\n\nexport default function(multiArrayComputed) {\n  return Helper.extend({\n    compute([...arrays]) {\n      set(this, 'arrays', arrays.map((obj) => {\n        if (isEmberArray(obj)) {\n          return emberArray(obj);\n        }\n\n        return obj;\n      }));\n\n      return get(this, 'content');\n    },\n\n    valuesDidChange: observer('arrays.[]', function() {\n      this._recomputeArrayKeys();\n\n      let arrays = get(this, 'arrays');\n      let arrayKeys = get(this, 'arrayKeys');\n\n      if (isEmpty(arrays)) {\n        defineProperty(this, 'content', []);\n        return;\n      }\n\n      defineProperty(this, 'content', multiArrayComputed(...arrayKeys));\n    }),\n\n    contentDidChange: observer('content.[]', function() {\n      this.recompute();\n    }),\n\n    _recomputeArrayKeys() {\n      let arrays = get(this, 'arrays');\n\n      let oldArrayKeys = get(this, 'arrayKeys') || [];\n      let newArrayKeys = arrays.map(idForArray);\n\n      let keysToRemove = oldArrayKeys.filter((key) => {\n        return newArrayKeys.indexOf(key) === -1;\n      });\n\n      keysToRemove.forEach((key) => set(this, key, null));\n      arrays.forEach((array) => set(this, idForArray(array), array));\n\n      set(this, 'arrayKeys', newArrayKeys);\n    }\n  });\n}\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/node_modules/ember-composable-helpers/addon/-private/create-needle-haystack-helper.js":"import Ember from 'ember';\nimport computed from 'ember-computed';\nimport Helper from 'ember-helper';\nimport get from 'ember-metal/get';\nimport observer from 'ember-metal/observer';\nimport set from 'ember-metal/set';\n\nconst {\n  isEmpty\n} = Ember;\nconst K = () => { };\n\n/**\n * Creates a generic Helper class implementation that expects a `needle` and\n * `haystack` as arguments. A `fn` function is required to be passed in\n * that is invoked with the `needle` and `haystack` arguments.\n *\n * @private\n * @param  {Function} fn A function to run against the needle and haystack\n * @return {Any}\n */\nexport default function createNeedleHaystackHelper(fn = K) {\n  return Helper.extend({\n    content: computed('needle.[]', 'haystack.[]', 'option', function() {\n      let needle = get(this, 'needle');\n      let haystack = get(this, 'haystack');\n      let option = get(this, 'option');\n\n      return fn(needle, haystack, option);\n    }).readOnly(),\n\n    compute([needle, option, haystack]) {\n      if (isEmpty(haystack)) {\n        haystack = option;\n        option = null;\n      }\n\n      set(this, 'needle', needle);\n      set(this, 'haystack', haystack);\n      set(this, 'option', option);\n\n      return get(this, 'content');\n    },\n\n    contentDidChange: observer('content', function() {\n      this.recompute();\n    })\n  });\n}\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/node_modules/ember-composable-helpers/addon/utils/comparison.js":"export function lte(a, b) {\n  return a <= b;\n}\n\nexport function lt(a, b) {\n  return a < b;\n}\n\nexport function gte(a, b) {\n  return a >= b;\n}\n\nexport function gt(a, b) {\n  return a > b;\n}\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/node_modules/ember-composable-helpers/addon/utils/get-index.js":"import { A as emberArray } from 'ember-array/utils';\nimport isEqual from '../utils/is-equal';\n\nexport default function getIndex(array, currentValue, useDeepEqual) {\n  let needle = currentValue;\n\n  if (useDeepEqual) {\n    needle = emberArray(array).find((object) => {\n      return isEqual(object, currentValue, useDeepEqual);\n    });\n  }\n\n  let index = emberArray(array).indexOf(needle);\n\n  return index >= 0 ? index : null;\n}\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/node_modules/ember-composable-helpers/addon/utils/includes.js":"export default function includes(haystack, ...args) {\n  let finder = haystack.includes || haystack.contains;\n  return finder.apply(haystack, args);\n}\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/node_modules/ember-composable-helpers/addon/utils/is-equal.js":"import Ember from 'ember';\nconst { isEqual: emberIsEqual } = Ember;\n\nexport default function isEqual(firstValue, secondValue, useDeepEqual = false) {\n  if (useDeepEqual) {\n    return JSON.stringify(firstValue) === JSON.stringify(secondValue);\n  } else {\n    return emberIsEqual(firstValue, secondValue) || emberIsEqual(secondValue, firstValue);\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/node_modules/ember-composable-helpers/addon/utils/is-object.js":"import { typeOf } from 'ember-utils';\n\nexport default function isObject(val) {\n  return typeOf(val) === 'object' || typeOf(val) === 'instance';\n}\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/node_modules/ember-composable-helpers/addon/utils/is-promise.js":"import { typeOf } from 'ember-utils';\nimport isObject from './is-object';\n\nfunction isPromiseLike(obj = {}) {\n  return typeOf(obj.then) === 'function' &&\n    typeOf(obj.catch) === 'function';\n}\n\nexport default function isPromise(obj) {\n  return isObject(obj) && isPromiseLike(obj);\n}\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/node_modules/ember-composable-helpers/app/helpers/append.js":"export { default, append } from 'ember-composable-helpers/helpers/append';\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/node_modules/ember-composable-helpers/app/helpers/array.js":"export { default, array } from 'ember-composable-helpers/helpers/array';\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/node_modules/ember-composable-helpers/app/helpers/chunk.js":"export { default, chunk } from 'ember-composable-helpers/helpers/chunk';\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/node_modules/ember-composable-helpers/app/helpers/compact.js":"export { default, compact } from 'ember-composable-helpers/helpers/compact';\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/node_modules/ember-composable-helpers/app/helpers/compute.js":"export { default, compute } from 'ember-composable-helpers/helpers/compute';\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/node_modules/ember-composable-helpers/app/helpers/contains.js":"export { default, contains } from 'ember-composable-helpers/helpers/contains';\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/node_modules/ember-composable-helpers/app/helpers/dec.js":"export { default, dec } from 'ember-composable-helpers/helpers/dec';\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/node_modules/ember-composable-helpers/app/helpers/drop.js":"export { default, drop } from 'ember-composable-helpers/helpers/drop';\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/node_modules/ember-composable-helpers/app/helpers/filter-by.js":"export { default, filterBy } from 'ember-composable-helpers/helpers/filter-by';\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/node_modules/ember-composable-helpers/app/helpers/filter.js":"export { default, filter } from 'ember-composable-helpers/helpers/filter';\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/node_modules/ember-composable-helpers/app/helpers/find-by.js":"export { default, findBy } from 'ember-composable-helpers/helpers/find-by';\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/node_modules/ember-composable-helpers/app/helpers/flatten.js":"export { default, flatten } from 'ember-composable-helpers/helpers/flatten';\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/node_modules/ember-composable-helpers/app/helpers/group-by.js":"export { default, groupBy } from 'ember-composable-helpers/helpers/group-by';\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/node_modules/ember-composable-helpers/app/helpers/has-next.js":"export { default, hasNext } from 'ember-composable-helpers/helpers/has-next';\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/node_modules/ember-composable-helpers/app/helpers/has-previous.js":"export { default, hasPrevious } from 'ember-composable-helpers/helpers/has-previous';\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/node_modules/ember-composable-helpers/app/helpers/inc.js":"export { default, inc } from 'ember-composable-helpers/helpers/inc';\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/node_modules/ember-composable-helpers/app/helpers/intersect.js":"export { default, intersect } from 'ember-composable-helpers/helpers/intersect';\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/node_modules/ember-composable-helpers/app/helpers/invoke.js":"export { default, invoke } from 'ember-composable-helpers/helpers/invoke';\n\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/node_modules/ember-composable-helpers/app/helpers/join.js":"export { default, join } from 'ember-composable-helpers/helpers/join';\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/node_modules/ember-composable-helpers/app/helpers/map-by.js":"export { default, mapBy } from 'ember-composable-helpers/helpers/map-by';\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/node_modules/ember-composable-helpers/app/helpers/map.js":"export { default, map } from 'ember-composable-helpers/helpers/map';\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/node_modules/ember-composable-helpers/app/helpers/next.js":"export { default, next } from 'ember-composable-helpers/helpers/next';\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/node_modules/ember-composable-helpers/app/helpers/object-at.js":"export { default, objectAt } from 'ember-composable-helpers/helpers/object-at';\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/node_modules/ember-composable-helpers/app/helpers/optional.js":"export { default, optional } from 'ember-composable-helpers/helpers/optional';\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/node_modules/ember-composable-helpers/app/helpers/pipe-action.js":"export { default } from 'ember-composable-helpers/helpers/pipe-action';\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/node_modules/ember-composable-helpers/app/helpers/pipe.js":"export { default, pipe } from 'ember-composable-helpers/helpers/pipe';\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/node_modules/ember-composable-helpers/app/helpers/previous.js":"export { default, previous } from 'ember-composable-helpers/helpers/previous';\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/node_modules/ember-composable-helpers/app/helpers/queue.js":"export { default, queue } from 'ember-composable-helpers/helpers/queue';\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/node_modules/ember-composable-helpers/app/helpers/range.js":"export { default, range } from 'ember-composable-helpers/helpers/range';\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/node_modules/ember-composable-helpers/app/helpers/reduce.js":"export { default, reduce } from 'ember-composable-helpers/helpers/reduce';\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/node_modules/ember-composable-helpers/app/helpers/reject-by.js":"export { default, rejectBy } from 'ember-composable-helpers/helpers/reject-by';\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/node_modules/ember-composable-helpers/app/helpers/repeat.js":"export { default, repeat } from 'ember-composable-helpers/helpers/repeat';\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/node_modules/ember-composable-helpers/app/helpers/reverse.js":"export { default, reverse } from 'ember-composable-helpers/helpers/reverse';\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/node_modules/ember-composable-helpers/app/helpers/shuffle.js":"export { default, shuffle } from 'ember-composable-helpers/helpers/shuffle';\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/node_modules/ember-composable-helpers/app/helpers/slice.js":"export { default, slice } from 'ember-composable-helpers/helpers/slice';\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/node_modules/ember-composable-helpers/app/helpers/sort-by.js":"export { default, sortBy } from 'ember-composable-helpers/helpers/sort-by';\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/node_modules/ember-composable-helpers/app/helpers/take.js":"export { default, take } from 'ember-composable-helpers/helpers/take';\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/node_modules/ember-composable-helpers/app/helpers/toggle-action.js":"export { default } from 'ember-composable-helpers/helpers/toggle-action';\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/node_modules/ember-composable-helpers/app/helpers/toggle.js":"export { default, toggle } from 'ember-composable-helpers/helpers/toggle';\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/node_modules/ember-composable-helpers/app/helpers/union.js":"export { default, union } from 'ember-composable-helpers/helpers/union';\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/node_modules/ember-composable-helpers/app/helpers/without.js":"export { default, without } from 'ember-composable-helpers/helpers/without';\n","/home/travis/build/npmtest/node-npmtest-ember-composable-helpers/node_modules/ember-composable-helpers/blueprints/ember-composable-helpers/index.js":"module.exports = {\n  normalizeEntityName: function() {},\n\n  afterInstall: function() {\n    return this.addBowerPackageToProject('ember-cli-shims', '~0.1.1');\n  }\n};\n"}